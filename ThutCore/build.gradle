buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        flatDir {
          dirs 'libs'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
  // This is needed for the obtaining of version from git repo
  id 'org.ajoberstar.grgit' version '2.3.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

ext {
    VERSION = gitVersion()
    // Force a refresh of the toml file
    cleanTOML()
}


version = "${version_minecraft}-${VERSION}"
group = 'thut'
archivesBaseName = "${compile_name}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: "${version_mappings}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                thutcore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                thutcore {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${version_minecraft}-${version_forge}"
}

jar {
    manifest {
        attributes 'FMLAT': 'accesstransformer.cfg',
        "Specification-Title": "${compile_name}",
        "Specification-Vendor": "${author_name}",
        "Specification-Version": VERSION,
        "Implementation-Title": project.name,
        "Implementation-Version": VERSION,
        "Implementation-Vendor" :"${author_name}",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }
}

processResources.doLast {
    replaceParameters()
}

def replaceParameters() {
    ant.replace(
    file:"./build/resources/main/META-INF/mods.toml",
    token:"@VERSION",
    value:VERSION )
}

task sourcesJar(type: Jar) {
	classifier = "sources"
	from sourceSets.main.allJava
}

artifacts {
	archives sourcesJar
}

def cleanTOML()
{
    delete "./build/resources/main/META-INF/mods.toml" 
}

def gitVersion() {
    def raw = grgit.describe(longDescr: true)
    def desc = (raw == null ? 'unknown-offset-hash' : grgit.describe(longDescr: true)).split('-') as List
    def hash = desc.remove(desc.size() - 1)
    def offset = desc.remove(desc.size() - 1)
    def branch = grgit.branch.current().name
    return "${version_major}.${version_minor}.${offset}"
}